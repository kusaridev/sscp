/*
 * Secure Build API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SlsaProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner : A size-efficient description of any software artifact or resource (mutable or immutable).



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SlsaProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
    /// This field MAY be used to provide additional information or metadata about the resource or artifact that may be useful to the consumer when evaluating the attestation against a policy.
    #[serde(rename = "annotations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<Option<::std::collections::HashMap<String, serde_json::Value>>>,
    /// The contents of the resource or artifact. This field is REQUIRED unless either uri or digest is set.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// A set of cryptographic digests of the contents of the resource or artifact. This field is REQUIRED unless either uri or content is set.
    #[serde(rename = "digest", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub digest: Option<Option<::std::collections::HashMap<String, String>>>,
    /// The location of the described resource or artifact, if different from the uri.
    #[serde(rename = "downloadLocation", skip_serializing_if = "Option::is_none")]
    pub download_location: Option<String>,
    /// The MIME Type (i.e., media type) of the described resource or artifact.
    #[serde(rename = "mediaType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<Option<String>>,
    /// Machine-readable identifier for distinguishing between descriptors.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// A URI used to identify the resource or artifact globally. This field is REQUIRED unless either digest or content is set.
    #[serde(rename = "uri")]
    pub uri: String,
}

impl SlsaProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
    /// A size-efficient description of any software artifact or resource (mutable or immutable).
    pub fn new(uri: String) -> SlsaProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
        SlsaProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
            annotations: None,
            content: None,
            digest: None,
            download_location: None,
            media_type: None,
            name: None,
            uri,
        }
    }
}


