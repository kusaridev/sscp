/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BuildStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildStatus{}

// BuildStatus struct for BuildStatus
type BuildStatus struct {
	Status *string `json:"status,omitempty"`
}

// NewBuildStatus instantiates a new BuildStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildStatus() *BuildStatus {
	this := BuildStatus{}
	return &this
}

// NewBuildStatusWithDefaults instantiates a new BuildStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildStatusWithDefaults() *BuildStatus {
	this := BuildStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BuildStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BuildStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BuildStatus) SetStatus(v string) {
	o.Status = &v
}

func (o BuildStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableBuildStatus struct {
	value *BuildStatus
	isSet bool
}

func (v NullableBuildStatus) Get() *BuildStatus {
	return v.value
}

func (v *NullableBuildStatus) Set(val *BuildStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildStatus(val *BuildStatus) *NullableBuildStatus {
	return &NullableBuildStatus{value: val, isSet: true}
}

func (v NullableBuildStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


