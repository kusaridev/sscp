/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SlsaProvenanceV01 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlsaProvenanceV01{}

// SlsaProvenanceV01 Represents an In-Toto v1 statement.
type SlsaProvenanceV01 struct {
	Type string `json:"_type"`
	Predicate SLSAProvenanceV1Predicate `json:"predicate"`
	PredicateType string `json:"predicateType"`
	Subject []Subject `json:"subject"`
}

// NewSlsaProvenanceV01 instantiates a new SlsaProvenanceV01 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlsaProvenanceV01(type_ string, predicate SLSAProvenanceV1Predicate, predicateType string, subject []Subject) *SlsaProvenanceV01 {
	this := SlsaProvenanceV01{}
	this.Type = type_
	this.Predicate = predicate
	this.PredicateType = predicateType
	this.Subject = subject
	return &this
}

// NewSlsaProvenanceV01WithDefaults instantiates a new SlsaProvenanceV01 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlsaProvenanceV01WithDefaults() *SlsaProvenanceV01 {
	this := SlsaProvenanceV01{}
	return &this
}

// GetType returns the Type field value
func (o *SlsaProvenanceV01) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SlsaProvenanceV01) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SlsaProvenanceV01) SetType(v string) {
	o.Type = v
}

// GetPredicate returns the Predicate field value
func (o *SlsaProvenanceV01) GetPredicate() SLSAProvenanceV1Predicate {
	if o == nil {
		var ret SLSAProvenanceV1Predicate
		return ret
	}

	return o.Predicate
}

// GetPredicateOk returns a tuple with the Predicate field value
// and a boolean to check if the value has been set.
func (o *SlsaProvenanceV01) GetPredicateOk() (*SLSAProvenanceV1Predicate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Predicate, true
}

// SetPredicate sets field value
func (o *SlsaProvenanceV01) SetPredicate(v SLSAProvenanceV1Predicate) {
	o.Predicate = v
}

// GetPredicateType returns the PredicateType field value
func (o *SlsaProvenanceV01) GetPredicateType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PredicateType
}

// GetPredicateTypeOk returns a tuple with the PredicateType field value
// and a boolean to check if the value has been set.
func (o *SlsaProvenanceV01) GetPredicateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PredicateType, true
}

// SetPredicateType sets field value
func (o *SlsaProvenanceV01) SetPredicateType(v string) {
	o.PredicateType = v
}

// GetSubject returns the Subject field value
func (o *SlsaProvenanceV01) GetSubject() []Subject {
	if o == nil {
		var ret []Subject
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *SlsaProvenanceV01) GetSubjectOk() ([]Subject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject, true
}

// SetSubject sets field value
func (o *SlsaProvenanceV01) SetSubject(v []Subject) {
	o.Subject = v
}

func (o SlsaProvenanceV01) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlsaProvenanceV01) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_type"] = o.Type
	toSerialize["predicate"] = o.Predicate
	toSerialize["predicateType"] = o.PredicateType
	toSerialize["subject"] = o.Subject
	return toSerialize, nil
}

type NullableSlsaProvenanceV01 struct {
	value *SlsaProvenanceV01
	isSet bool
}

func (v NullableSlsaProvenanceV01) Get() *SlsaProvenanceV01 {
	return v.value
}

func (v *NullableSlsaProvenanceV01) Set(val *SlsaProvenanceV01) {
	v.value = val
	v.isSet = true
}

func (v NullableSlsaProvenanceV01) IsSet() bool {
	return v.isSet
}

func (v *NullableSlsaProvenanceV01) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlsaProvenanceV01(val *SlsaProvenanceV01) *NullableSlsaProvenanceV01 {
	return &NullableSlsaProvenanceV01{value: val, isSet: true}
}

func (v NullableSlsaProvenanceV01) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlsaProvenanceV01) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


