/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CdBuildstartedSubject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CdBuildstartedSubject{}

// CdBuildstartedSubject struct for CdBuildstartedSubject
type CdBuildstartedSubject struct {
	Id string `json:"id"`
	Source *string `json:"source,omitempty"`
	Type string `json:"type"`
	Content map[string]interface{} `json:"content"`
}

// NewCdBuildstartedSubject instantiates a new CdBuildstartedSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdBuildstartedSubject(id string, type_ string, content map[string]interface{}) *CdBuildstartedSubject {
	this := CdBuildstartedSubject{}
	this.Id = id
	this.Type = type_
	this.Content = content
	return &this
}

// NewCdBuildstartedSubjectWithDefaults instantiates a new CdBuildstartedSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdBuildstartedSubjectWithDefaults() *CdBuildstartedSubject {
	this := CdBuildstartedSubject{}
	var type_ string = "build"
	this.Type = type_
	return &this
}

// GetId returns the Id field value
func (o *CdBuildstartedSubject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedSubject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CdBuildstartedSubject) SetId(v string) {
	o.Id = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CdBuildstartedSubject) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdBuildstartedSubject) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CdBuildstartedSubject) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *CdBuildstartedSubject) SetSource(v string) {
	o.Source = &v
}

// GetType returns the Type field value
func (o *CdBuildstartedSubject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedSubject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CdBuildstartedSubject) SetType(v string) {
	o.Type = v
}

// GetContent returns the Content field value
func (o *CdBuildstartedSubject) GetContent() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedSubject) GetContentOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *CdBuildstartedSubject) SetContent(v map[string]interface{}) {
	o.Content = v
}

func (o CdBuildstartedSubject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CdBuildstartedSubject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["type"] = o.Type
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

type NullableCdBuildstartedSubject struct {
	value *CdBuildstartedSubject
	isSet bool
}

func (v NullableCdBuildstartedSubject) Get() *CdBuildstartedSubject {
	return v.value
}

func (v *NullableCdBuildstartedSubject) Set(val *CdBuildstartedSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableCdBuildstartedSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableCdBuildstartedSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdBuildstartedSubject(val *CdBuildstartedSubject) *NullableCdBuildstartedSubject {
	return &NullableCdBuildstartedSubject{value: val, isSet: true}
}

func (v NullableCdBuildstartedSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdBuildstartedSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


