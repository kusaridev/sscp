/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BuildOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildOutput{}

// BuildOutput struct for BuildOutput
type BuildOutput struct {
	Sha256 *string `json:"sha256,omitempty"`
	MediaType *string `json:"mediaType,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewBuildOutput instantiates a new BuildOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildOutput() *BuildOutput {
	this := BuildOutput{}
	return &this
}

// NewBuildOutputWithDefaults instantiates a new BuildOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildOutputWithDefaults() *BuildOutput {
	this := BuildOutput{}
	return &this
}

// GetSha256 returns the Sha256 field value if set, zero value otherwise.
func (o *BuildOutput) GetSha256() string {
	if o == nil || IsNil(o.Sha256) {
		var ret string
		return ret
	}
	return *o.Sha256
}

// GetSha256Ok returns a tuple with the Sha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildOutput) GetSha256Ok() (*string, bool) {
	if o == nil || IsNil(o.Sha256) {
		return nil, false
	}
	return o.Sha256, true
}

// HasSha256 returns a boolean if a field has been set.
func (o *BuildOutput) HasSha256() bool {
	if o != nil && !IsNil(o.Sha256) {
		return true
	}

	return false
}

// SetSha256 gets a reference to the given string and assigns it to the Sha256 field.
func (o *BuildOutput) SetSha256(v string) {
	o.Sha256 = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *BuildOutput) GetMediaType() string {
	if o == nil || IsNil(o.MediaType) {
		var ret string
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildOutput) GetMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *BuildOutput) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given string and assigns it to the MediaType field.
func (o *BuildOutput) SetMediaType(v string) {
	o.MediaType = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *BuildOutput) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildOutput) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *BuildOutput) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *BuildOutput) SetPath(v string) {
	o.Path = &v
}

func (o BuildOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sha256) {
		toSerialize["sha256"] = o.Sha256
	}
	if !IsNil(o.MediaType) {
		toSerialize["mediaType"] = o.MediaType
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableBuildOutput struct {
	value *BuildOutput
	isSet bool
}

func (v NullableBuildOutput) Get() *BuildOutput {
	return v.value
}

func (v *NullableBuildOutput) Set(val *BuildOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildOutput(val *BuildOutput) *NullableBuildOutput {
	return &NullableBuildOutput{value: val, isSet: true}
}

func (v NullableBuildOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


