/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GitRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitRef{}

// GitRef struct for GitRef
type GitRef struct {
	Uri *string `json:"uri,omitempty"`
	CommitId *string `json:"commitId,omitempty"`
}

// NewGitRef instantiates a new GitRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitRef() *GitRef {
	this := GitRef{}
	return &this
}

// NewGitRefWithDefaults instantiates a new GitRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitRefWithDefaults() *GitRef {
	this := GitRef{}
	return &this
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *GitRef) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *GitRef) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *GitRef) SetUri(v string) {
	o.Uri = &v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *GitRef) GetCommitId() string {
	if o == nil || IsNil(o.CommitId) {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommitId) {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *GitRef) HasCommitId() bool {
	if o != nil && !IsNil(o.CommitId) {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *GitRef) SetCommitId(v string) {
	o.CommitId = &v
}

func (o GitRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.CommitId) {
		toSerialize["commitId"] = o.CommitId
	}
	return toSerialize, nil
}

type NullableGitRef struct {
	value *GitRef
	isSet bool
}

func (v NullableGitRef) Get() *GitRef {
	return v.value
}

func (v *NullableGitRef) Set(val *GitRef) {
	v.value = val
	v.isSet = true
}

func (v NullableGitRef) IsSet() bool {
	return v.isSet
}

func (v *NullableGitRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitRef(val *GitRef) *NullableGitRef {
	return &NullableGitRef{value: val, isSet: true}
}

func (v NullableGitRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


