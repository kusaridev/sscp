/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CdBuildstarted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CdBuildstarted{}

// CdBuildstarted struct for CdBuildstarted
type CdBuildstarted struct {
	Context CdBuildstartedContext `json:"context"`
	Subject CdBuildstartedSubject `json:"subject"`
	CustomData *CdBuildstartedCustomData `json:"customData,omitempty"`
	CustomDataContentType *string `json:"customDataContentType,omitempty"`
}

// NewCdBuildstarted instantiates a new CdBuildstarted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdBuildstarted(context CdBuildstartedContext, subject CdBuildstartedSubject) *CdBuildstarted {
	this := CdBuildstarted{}
	this.Context = context
	this.Subject = subject
	return &this
}

// NewCdBuildstartedWithDefaults instantiates a new CdBuildstarted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdBuildstartedWithDefaults() *CdBuildstarted {
	this := CdBuildstarted{}
	return &this
}

// GetContext returns the Context field value
func (o *CdBuildstarted) GetContext() CdBuildstartedContext {
	if o == nil {
		var ret CdBuildstartedContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *CdBuildstarted) GetContextOk() (*CdBuildstartedContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *CdBuildstarted) SetContext(v CdBuildstartedContext) {
	o.Context = v
}

// GetSubject returns the Subject field value
func (o *CdBuildstarted) GetSubject() CdBuildstartedSubject {
	if o == nil {
		var ret CdBuildstartedSubject
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *CdBuildstarted) GetSubjectOk() (*CdBuildstartedSubject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *CdBuildstarted) SetSubject(v CdBuildstartedSubject) {
	o.Subject = v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *CdBuildstarted) GetCustomData() CdBuildstartedCustomData {
	if o == nil || IsNil(o.CustomData) {
		var ret CdBuildstartedCustomData
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdBuildstarted) GetCustomDataOk() (*CdBuildstartedCustomData, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *CdBuildstarted) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given CdBuildstartedCustomData and assigns it to the CustomData field.
func (o *CdBuildstarted) SetCustomData(v CdBuildstartedCustomData) {
	o.CustomData = &v
}

// GetCustomDataContentType returns the CustomDataContentType field value if set, zero value otherwise.
func (o *CdBuildstarted) GetCustomDataContentType() string {
	if o == nil || IsNil(o.CustomDataContentType) {
		var ret string
		return ret
	}
	return *o.CustomDataContentType
}

// GetCustomDataContentTypeOk returns a tuple with the CustomDataContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdBuildstarted) GetCustomDataContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CustomDataContentType) {
		return nil, false
	}
	return o.CustomDataContentType, true
}

// HasCustomDataContentType returns a boolean if a field has been set.
func (o *CdBuildstarted) HasCustomDataContentType() bool {
	if o != nil && !IsNil(o.CustomDataContentType) {
		return true
	}

	return false
}

// SetCustomDataContentType gets a reference to the given string and assigns it to the CustomDataContentType field.
func (o *CdBuildstarted) SetCustomDataContentType(v string) {
	o.CustomDataContentType = &v
}

func (o CdBuildstarted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CdBuildstarted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["subject"] = o.Subject
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	if !IsNil(o.CustomDataContentType) {
		toSerialize["customDataContentType"] = o.CustomDataContentType
	}
	return toSerialize, nil
}

type NullableCdBuildstarted struct {
	value *CdBuildstarted
	isSet bool
}

func (v NullableCdBuildstarted) Get() *CdBuildstarted {
	return v.value
}

func (v *NullableCdBuildstarted) Set(val *CdBuildstarted) {
	v.value = val
	v.isSet = true
}

func (v NullableCdBuildstarted) IsSet() bool {
	return v.isSet
}

func (v *NullableCdBuildstarted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdBuildstarted(val *CdBuildstarted) *NullableCdBuildstarted {
	return &NullableCdBuildstarted{value: val, isSet: true}
}

func (v NullableCdBuildstarted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdBuildstarted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


