/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SLSAProvenanceV1Predicate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SLSAProvenanceV1Predicate{}

// SLSAProvenanceV1Predicate A structure representing the SLSA Provenance v1 Predicate.
type SLSAProvenanceV1Predicate struct {
	BuildDefinition SLSAProvenanceV1PredicateBuildDefinition `json:"buildDefinition"`
	RunDetails SLSAProvenanceV1PredicateRunDetails `json:"runDetails"`
}

// NewSLSAProvenanceV1Predicate instantiates a new SLSAProvenanceV1Predicate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLSAProvenanceV1Predicate(buildDefinition SLSAProvenanceV1PredicateBuildDefinition, runDetails SLSAProvenanceV1PredicateRunDetails) *SLSAProvenanceV1Predicate {
	this := SLSAProvenanceV1Predicate{}
	this.BuildDefinition = buildDefinition
	this.RunDetails = runDetails
	return &this
}

// NewSLSAProvenanceV1PredicateWithDefaults instantiates a new SLSAProvenanceV1Predicate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLSAProvenanceV1PredicateWithDefaults() *SLSAProvenanceV1Predicate {
	this := SLSAProvenanceV1Predicate{}
	return &this
}

// GetBuildDefinition returns the BuildDefinition field value
func (o *SLSAProvenanceV1Predicate) GetBuildDefinition() SLSAProvenanceV1PredicateBuildDefinition {
	if o == nil {
		var ret SLSAProvenanceV1PredicateBuildDefinition
		return ret
	}

	return o.BuildDefinition
}

// GetBuildDefinitionOk returns a tuple with the BuildDefinition field value
// and a boolean to check if the value has been set.
func (o *SLSAProvenanceV1Predicate) GetBuildDefinitionOk() (*SLSAProvenanceV1PredicateBuildDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildDefinition, true
}

// SetBuildDefinition sets field value
func (o *SLSAProvenanceV1Predicate) SetBuildDefinition(v SLSAProvenanceV1PredicateBuildDefinition) {
	o.BuildDefinition = v
}

// GetRunDetails returns the RunDetails field value
func (o *SLSAProvenanceV1Predicate) GetRunDetails() SLSAProvenanceV1PredicateRunDetails {
	if o == nil {
		var ret SLSAProvenanceV1PredicateRunDetails
		return ret
	}

	return o.RunDetails
}

// GetRunDetailsOk returns a tuple with the RunDetails field value
// and a boolean to check if the value has been set.
func (o *SLSAProvenanceV1Predicate) GetRunDetailsOk() (*SLSAProvenanceV1PredicateRunDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunDetails, true
}

// SetRunDetails sets field value
func (o *SLSAProvenanceV1Predicate) SetRunDetails(v SLSAProvenanceV1PredicateRunDetails) {
	o.RunDetails = v
}

func (o SLSAProvenanceV1Predicate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SLSAProvenanceV1Predicate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["buildDefinition"] = o.BuildDefinition
	toSerialize["runDetails"] = o.RunDetails
	return toSerialize, nil
}

type NullableSLSAProvenanceV1Predicate struct {
	value *SLSAProvenanceV1Predicate
	isSet bool
}

func (v NullableSLSAProvenanceV1Predicate) Get() *SLSAProvenanceV1Predicate {
	return v.value
}

func (v *NullableSLSAProvenanceV1Predicate) Set(val *SLSAProvenanceV1Predicate) {
	v.value = val
	v.isSet = true
}

func (v NullableSLSAProvenanceV1Predicate) IsSet() bool {
	return v.isSet
}

func (v *NullableSLSAProvenanceV1Predicate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLSAProvenanceV1Predicate(val *SLSAProvenanceV1Predicate) *NullableSLSAProvenanceV1Predicate {
	return &NullableSLSAProvenanceV1Predicate{value: val, isSet: true}
}

func (v NullableSLSAProvenanceV1Predicate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLSAProvenanceV1Predicate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


