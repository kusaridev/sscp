/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CdBuildstartedContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CdBuildstartedContext{}

// CdBuildstartedContext struct for CdBuildstartedContext
type CdBuildstartedContext struct {
	Version string `json:"version"`
	Id string `json:"id"`
	Source string `json:"source"`
	Type string `json:"type"`
	Timestamp time.Time `json:"timestamp"`
}

// NewCdBuildstartedContext instantiates a new CdBuildstartedContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdBuildstartedContext(version string, id string, source string, type_ string, timestamp time.Time) *CdBuildstartedContext {
	this := CdBuildstartedContext{}
	this.Version = version
	this.Id = id
	this.Source = source
	this.Type = type_
	this.Timestamp = timestamp
	return &this
}

// NewCdBuildstartedContextWithDefaults instantiates a new CdBuildstartedContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdBuildstartedContextWithDefaults() *CdBuildstartedContext {
	this := CdBuildstartedContext{}
	var type_ string = "dev.cdevents.build.started.0.1.1"
	this.Type = type_
	return &this
}

// GetVersion returns the Version field value
func (o *CdBuildstartedContext) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedContext) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CdBuildstartedContext) SetVersion(v string) {
	o.Version = v
}

// GetId returns the Id field value
func (o *CdBuildstartedContext) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedContext) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CdBuildstartedContext) SetId(v string) {
	o.Id = v
}

// GetSource returns the Source field value
func (o *CdBuildstartedContext) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedContext) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CdBuildstartedContext) SetSource(v string) {
	o.Source = v
}

// GetType returns the Type field value
func (o *CdBuildstartedContext) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedContext) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CdBuildstartedContext) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *CdBuildstartedContext) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CdBuildstartedContext) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CdBuildstartedContext) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o CdBuildstartedContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CdBuildstartedContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["id"] = o.Id
	toSerialize["source"] = o.Source
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

type NullableCdBuildstartedContext struct {
	value *CdBuildstartedContext
	isSet bool
}

func (v NullableCdBuildstartedContext) Get() *CdBuildstartedContext {
	return v.value
}

func (v *NullableCdBuildstartedContext) Set(val *CdBuildstartedContext) {
	v.value = val
	v.isSet = true
}

func (v NullableCdBuildstartedContext) IsSet() bool {
	return v.isSet
}

func (v *NullableCdBuildstartedContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdBuildstartedContext(val *CdBuildstartedContext) *NullableCdBuildstartedContext {
	return &NullableCdBuildstartedContext{value: val, isSet: true}
}

func (v NullableCdBuildstartedContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdBuildstartedContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


