/*
Secure Build API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner{}

// SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner A size-efficient description of any software artifact or resource (mutable or immutable).
type SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner struct {
	// This field MAY be used to provide additional information or metadata about the resource or artifact that may be useful to the consumer when evaluating the attestation against a policy.
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// The contents of the resource or artifact. This field is REQUIRED unless either uri or digest is set.
	Content *string `json:"content,omitempty"`
	// A set of cryptographic digests of the contents of the resource or artifact. This field is REQUIRED unless either uri or content is set.
	Digest map[string]string `json:"digest,omitempty"`
	// The location of the described resource or artifact, if different from the uri.
	DownloadLocation *string `json:"downloadLocation,omitempty"`
	// The MIME Type (i.e., media type) of the described resource or artifact.
	MediaType NullableString `json:"mediaType,omitempty"`
	// Machine-readable identifier for distinguishing between descriptors.
	Name NullableString `json:"name,omitempty"`
	// A URI used to identify the resource or artifact globally. This field is REQUIRED unless either digest or content is set.
	Uri string `json:"uri"`
}

// NewSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner instantiates a new SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner(uri string) *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
	this := SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner{}
	this.Uri = uri
	return &this
}

// NewSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInnerWithDefaults instantiates a new SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInnerWithDefaults() *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
	this := SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetAnnotations() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetAnnotationsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Annotations) {
		return map[string]interface{}{}, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) HasAnnotations() bool {
	if o != nil && IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]interface{} and assigns it to the Annotations field.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetAnnotations(v map[string]interface{}) {
	o.Annotations = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetContent(v string) {
	o.Content = &v
}

// GetDigest returns the Digest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetDigest() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetDigestOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Digest) {
		return nil, false
	}
	return &o.Digest, true
}

// HasDigest returns a boolean if a field has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) HasDigest() bool {
	if o != nil && IsNil(o.Digest) {
		return true
	}

	return false
}

// SetDigest gets a reference to the given map[string]string and assigns it to the Digest field.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetDigest(v map[string]string) {
	o.Digest = v
}

// GetDownloadLocation returns the DownloadLocation field value if set, zero value otherwise.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetDownloadLocation() string {
	if o == nil || IsNil(o.DownloadLocation) {
		var ret string
		return ret
	}
	return *o.DownloadLocation
}

// GetDownloadLocationOk returns a tuple with the DownloadLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetDownloadLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadLocation) {
		return nil, false
	}
	return o.DownloadLocation, true
}

// HasDownloadLocation returns a boolean if a field has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) HasDownloadLocation() bool {
	if o != nil && !IsNil(o.DownloadLocation) {
		return true
	}

	return false
}

// SetDownloadLocation gets a reference to the given string and assigns it to the DownloadLocation field.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetDownloadLocation(v string) {
	o.DownloadLocation = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetMediaType() string {
	if o == nil || IsNil(o.MediaType.Get()) {
		var ret string
		return ret
	}
	return *o.MediaType.Get()
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MediaType.Get(), o.MediaType.IsSet()
}

// HasMediaType returns a boolean if a field has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) HasMediaType() bool {
	if o != nil && o.MediaType.IsSet() {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given NullableString and assigns it to the MediaType field.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetMediaType(v string) {
	o.MediaType.Set(&v)
}
// SetMediaTypeNil sets the value for MediaType to be an explicit nil
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetMediaTypeNil() {
	o.MediaType.Set(nil)
}

// UnsetMediaType ensures that no value is present for MediaType, not even an explicit nil
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) UnsetMediaType() {
	o.MediaType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) UnsetName() {
	o.Name.Unset()
}

// GetUri returns the Uri field value
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) SetUri(v string) {
	o.Uri = v
}

func (o SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if o.Digest != nil {
		toSerialize["digest"] = o.Digest
	}
	if !IsNil(o.DownloadLocation) {
		toSerialize["downloadLocation"] = o.DownloadLocation
	}
	if o.MediaType.IsSet() {
		toSerialize["mediaType"] = o.MediaType.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

type NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner struct {
	value *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner
	isSet bool
}

func (v NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) Get() *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
	return v.value
}

func (v *NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) Set(val *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner(val *SLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) *NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner {
	return &NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner{value: val, isSet: true}
}

func (v NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLSAProvenanceV1PredicateBuildDefinitionResolvedDependenciesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


